/*
 * Copyright 2019 crowdbotics.com
 */

package {{cookiecutter.top_level_domain_name}}.{{cookiecutter.second_level_domain_name}}.{{cookiecutter.project_package_name}}.security;

import {{cookiecutter.top_level_domain_name}}.{{cookiecutter.second_level_domain_name}}.{{cookiecutter.project_package_name}}.ApplicationConstants;
import {{cookiecutter.top_level_domain_name}}.{{cookiecutter.second_level_domain_name}}.{{cookiecutter.project_package_name}}.domain.model.user.ApplicationUserDataLoader;
import {{cookiecutter.top_level_domain_name}}.{{cookiecutter.second_level_domain_name}}.{{cookiecutter.project_package_name}}.domain.model.user.TestController;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

/**
 * <h1>Test Controller Tests</h1>
 *
 * @author crowdbotics.com
 */
@AutoConfigureMockMvc
@RunWith(
	SpringRunner.class
)
@SpringBootTest
public class TestControllerTests 
{
	//
	// Tests
	//

	/**
	 *
	 */
	@Test
	public void contextLoads()
	{
		assertThat( testController ).isNotNull();
	}

	/**
	 *
	 */
	@Test
	public void shouldNotAllowAccessToUnauthenticatedUsers()
		throws Exception
	{
		mvc.perform(
			MockMvcRequestBuilders.get("/test" )
		)
		.andExpect( status().isForbidden() )
		;
	}

	/**
	 *
	 */
	@Test
	public void shouldGenerateAuthToken()
		throws Exception
	{
		assertThat( testController ).isNotNull();

		final String token = JWTAuthenticationFilter.createToken( ApplicationUserDataLoader.ADMIN_USERNAME );
		assertThat( token ).isNotNull();

		mvc.perform(
			MockMvcRequestBuilders.get("/test" )
			.header( "Authorization", ApplicationConstants.TOKEN_PREFIX + token )
		)
		.andExpect( status().isOk() )
		;
	}

	//
	// Operations
	//

	@Before
	public void beforeEachTest()
	{
	}

	//
	// Attributes
	//

	//
	// Autowired
	//

	@Autowired
	private MockMvc mvc;

	@Autowired
	private TestController testController;

}
