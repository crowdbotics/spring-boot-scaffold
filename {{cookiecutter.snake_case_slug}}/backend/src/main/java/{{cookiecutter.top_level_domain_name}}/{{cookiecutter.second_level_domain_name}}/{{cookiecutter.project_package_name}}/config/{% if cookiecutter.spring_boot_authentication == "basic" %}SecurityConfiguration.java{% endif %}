package {{cookiecutter.top_level_domain_name}}.{{cookiecutter.second_level_domain_name}}.{{cookiecutter.project_package_name}}.config;

import {{cookiecutter.top_level_domain_name}}.{{cookiecutter.second_level_domain_name}}.{{cookiecutter.project_package_name}}.security.ActiveUserStore;
import {{cookiecutter.top_level_domain_name}}.{{cookiecutter.second_level_domain_name}}.{{cookiecutter.project_package_name}}.web.RegistrationController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.session.SessionRegistry;
import org.springframework.security.core.session.SessionRegistryImpl;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

/**
 * <h1>Security Configuration</h1>
 *
 * <p>This implementation supports basic authentication.</p>
 * 
 * @author crowdbotics.com
 */
@Configuration
@EnableWebSecurity
public class SecurityConfiguration 
	extends WebSecurityConfigurerAdapter 
{
//	/**
//	 * {@inheritDoc}
//	 *
//	 * @see WebSecurityConfigurerAdapter#configure(AuthenticationManagerBuilder)
//	 */
//	@Override
//	protected void configure(
//		final AuthenticationManagerBuilder _authenticationManagerBuilder
//	) 
//		throws Exception 
//	{
//		_authenticationManagerBuilder.authenticationProvider( authenticationProvider() );
//	}

	/**
	 * {@inheritDoc}
	 *
	 * @see WebSecurityConfigurerAdapter#configure(HttpSecurity)
	 */
	@Override
	protected void configure( 
		final HttpSecurity _http
	) 
		throws Exception
	{
		_http
			.csrf().disable()
			.authorizeRequests()
			.antMatchers("/admin/**" ).hasRole( "ADMIN" )
			.antMatchers("/anonymous*" ).anonymous()
			.antMatchers( HttpMethod.GET, "/index*", "/static/**", "/*.js", "/*.json", "/*.ico" ).permitAll()
			.antMatchers( RegistrationController.USER_REGISTRATION ).permitAll()
			.anyRequest().authenticated()
			.and()
			.formLogin()
			.loginPage( "/index.html" )
			.loginProcessingUrl( "/perform_login" )
			.defaultSuccessUrl("/homepage.html",true )
			.failureUrl( "/index.html?error=true" )
			.and()
			.logout()
			.logoutUrl( "/perform_logout" )
			.deleteCookies( "JSESSIONID" );




//		_http
//			.csrf().disable()
//			.authorizeRequests()
//				.antMatchers( HttpMethod.OPTIONS, "/**" ).permitAll()
//
////				.antMatchers("/login*","/login*", "/logout*", "/signin/**", "/signup/**", "/customLogin",
////					"/user/registration*", "/registrationConfirm*", "/expiredAccount*", "/registration*",
////					"/badUser*", "/user/resendRegistrationToken*" ,"/forgetPassword*", "/user/resetPassword*",
////					"/user/changePassword*", "/emailError*", "/resources/**","/old/user/registration*","/successRegister*","/qrcode*"
////				).permitAll()
//
//			.anyRequest().authenticated()
//			.and()
////			.httpBasic()
//			;
	}

	/**
	 * {@inheritDoc}
	 *
	 * @see WebSecurityConfigurerAdapter#configure(WebSecurity)
	 */
	@Override
	public void configure(
		final WebSecurity _webSecurity
	) 
		throws Exception 
	{
		_webSecurity.ignoring().antMatchers( "/resources/**" );
	}

	/**
	 * Configure for in-memory authentication.
	 * 
	 * @param _builder					{@link AuthenticationManagerBuilder}
	 * @throws Exception
	 */
	@Autowired
	public void configureGlobal( 
		final AuthenticationManagerBuilder _builder
	)
		throws Exception
	{
		_builder.inMemoryAuthentication()
			.withUser( USERNAME )
			.password( passwordEncoder().encode( PASSWORD ) )
			.roles( "USER" );
	}
	
	//
	// Attributes
	//
	
	public static final String PASSWORD = "password";
	public static final String USERNAME = "admin";

	//
	// Beans
	//
	
	/**
	 *
	 */
	@Bean
	public ActiveUserStore activeUserStore() 
	{
		return new ActiveUserStore();
	}

	/**
	 * <h1>Authentication Manager</h1>
	 */
	@Bean
	@Override
	public AuthenticationManager authenticationManagerBean()
		throws Exception 
	{
		return super.authenticationManagerBean();
	}
	
//	@Bean
//	public DaoAuthenticationProvider authenticationProvider() 
//	{
//		final CustomAuthenticationProvider authenticationProvider 
//			= new CustomAuthenticationProvider();
//	
//		authenticationProvider.setUserDetailsService( userDetailsService );
//		authenticationProvider.setPasswordEncoder( passwordEncoder() );
//	
//		return authenticationProvider;
//	}

//	/**
//	 *
//	 */
//	@Bean
//	public MessageSource messageSource()
//	{
//		ReloadableResourceBundleMessageSource messageSource
//		  = new ReloadableResourceBundleMessageSource();
//
//		messageSource.setBasename( "classpath:messages" );
//		messageSource.setDefaultEncoding( "UTF-8" );
//
//		return messageSource;
//	}
	
	/**
	 *
	 */
	@Bean
	public PasswordEncoder passwordEncoder() 
	{
		return new BCryptPasswordEncoder( 11 );
	}

	/**
	 *
	 */
	@Bean
	public SessionRegistry sessionRegistry() 
	{
		return new SessionRegistryImpl();
	}

}
