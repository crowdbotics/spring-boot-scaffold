{{cookiecutter.license_header}}

package {{cookiecutter.top_level_domain_name}}.{{cookiecutter.second_level_domain_name}}.{{cookiecutter.project_package_name}}.security;

import {{cookiecutter.top_level_domain_name}}.{{cookiecutter.second_level_domain_name}}.{{cookiecutter.project_package_name}}.ApplicationConstants;
import {{cookiecutter.top_level_domain_name}}.{{cookiecutter.second_level_domain_name}}.{{cookiecutter.project_package_name}}.domain.model.user.UserDetailsServiceImpl;
import org.springframework.context.annotation.Bean;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

/**
 * <h1>Web Security</h1>
 *
 * <p>This implementation supports JWT authentication.</p>
 * 
 * @author crowdbotics.com
 */
@EnableWebSecurity
public class WebSecurity extends WebSecurityConfigurerAdapter 
{
	/**
	 * Autowired constructor for {@link WebSecurity
	 *
	 * @param userDetailsService		{@link UserDetailsServiceImpl}
	 */
	public WebSecurity(
		UserDetailsServiceImpl _userDetailsService
	)
	{
		super();

		userDetailsService = _userDetailsService;
	}

	/**
	 * {@inheritDoc}
	 *
	 * @see WebSecurityConfigurerAdapter#configure(HttpSecurity) 
	 */
	@Override
	protected void configure(
		final HttpSecurity _httpSecurity
	)
		throws Exception
	{
		_httpSecurity.cors()
			.and()
			.csrf()
			.disable()
			.authorizeRequests()
			.antMatchers( HttpMethod.POST, ApplicationConstants.SIGN_UP_URL )
			.permitAll()
			.antMatchers( HttpMethod.GET, "/" ).permitAll()
			.antMatchers( HttpMethod.GET, "/static/**" ).permitAll()
			.anyRequest().authenticated()
			.and()
			.addFilter( new JWTAuthenticationFilter( authenticationManager() ) )
			.addFilter( new JWTAuthorizationFilter( authenticationManager() ) )
			// this disables session creation on Spring Security
			.sessionManagement()
			.sessionCreationPolicy( SessionCreationPolicy.STATELESS );
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @see WebSecurityConfigurerAdapter#configure(AuthenticationManagerBuilder) 
	 */
	@Override
	public void configure(
		final AuthenticationManagerBuilder _managerBuilder
	)
		throws Exception
	{
		_managerBuilder.userDetailsService( userDetailsService )
			.passwordEncoder( bCryptPasswordEncoder() );
	}

	//
	// Beans
	//

	/**
	 *
	 * @return {@link BCryptPasswordEncoder}
	 */
	@Bean
	public BCryptPasswordEncoder bCryptPasswordEncoder()
	{
		return new BCryptPasswordEncoder();
	}

	/**
	 *
	 * @return {@link CorsConfigurationSource}
	 */
	@Bean
	CorsConfigurationSource corsConfigurationSource()
	{
		final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
		source.registerCorsConfiguration(
			"/**"
			, new CorsConfiguration().applyPermitDefaultValues()
		);

		return source;
	}

	//
	// Autowired
	//

	private final UserDetailsServiceImpl userDetailsService;

}
